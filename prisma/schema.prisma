generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
  theme    = "dark"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id         Int          @id @default(autoincrement())
  nome       String
  email      String       @unique
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Caixa      Caixa[]
  EntryInput EntryInput[]
  OutInput   OutInput[]
}

model Projeto {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  descricao String
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  escolas   Escola[]
  itens     Item[]
}

model Escola {
  id           Int                @id @default(autoincrement())
  numeroEscola String
  nome         String
  projetoId    Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  projeto      Projeto            @relation(fields: [projetoId], references: [id])
  grades       Grade[]
  address      AddressSchool[]
  telefone     TelephonesSchool[]

  @@unique([projetoId, nome])
}

model TelephonesSchool {
  id        Int      @id @default(autoincrement())
  telefone  String   @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  escolaId  Int
  escola    Escola   @relation(fields: [escolaId], references: [id])
}

model AddressSchool {
  id           Int      @id @default(autoincrement())
  street       String
  number       String?
  complement   String?
  neighborhood String
  city         String?
  state        String?
  postalCode   String?
  country      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  escolaId     Int
  escola       Escola   @relation(fields: [escolaId], references: [id])
}

model Company {
  id        Int                 @id @default(autoincrement())
  nome      String              @unique @db.VarChar(200)
  email     String              @unique @db.VarChar(200)
  cnpj      String?             @unique @db.VarChar(18)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  address   AddressCompany[]
  telefone  TelephonesCompany[]
  Grade     Grade[]
}

model TelephonesCompany {
  id        Int      @id @default(autoincrement())
  telefone  String   @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model AddressCompany {
  id           Int      @id @default(autoincrement())
  street       String
  number       String?
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  companyId    Int
  company      Company  @relation(fields: [companyId], references: [id])
}

model Item {
  id         Int           @id @default(autoincrement())
  nome       String
  genero     Genero
  projetoId  Int
  url        String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  composicao String?
  projeto    Projeto       @relation(fields: [projetoId], references: [id])
  tamanhos   ItemTamanho[]

  @@unique([nome, projetoId, genero])
}

model Tamanho {
  id        Int           @id @default(autoincrement())
  nome      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  itens     ItemTamanho[]
}

model ItemTamanho {
  id         Int          @id @default(autoincrement())
  itemId     Int
  tamanhoId  Int
  url        String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  barcode    Barcode?
  estoque    Estoque?
  item       Item         @relation(fields: [itemId], references: [id])
  tamanho    Tamanho      @relation(fields: [tamanhoId], references: [id])
  entryInput EntryInput[]
  outInput   OutInput[]
  gradeItem  GradeItem[]
  ops        Ops[]

  @@unique([itemId, tamanhoId])
}

model Barcode {
  id            Int         @id @default(autoincrement())
  codigo        String      @unique
  itemTamanhoId Int         @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  itemTamanho   ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
}

model Estoque {
  id            Int          @id @default(autoincrement())
  itemTamanhoId Int          @unique
  quantidade    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  entryInput    EntryInput[]
  outInput      OutInput[]
  itemTamanho   ItemTamanho  @relation(fields: [itemTamanhoId], references: [id])
}

model Grade {
  id          Int         @id @default(autoincrement())
  escolaId    Int
  escola      Escola      @relation(fields: [escolaId], references: [id])
  companyId   Int
  company     Company     @relation(fields: [companyId], references: [id])
  finalizada  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tipo        String?
  gradeCaixas Caixa[]
  itensGrade  GradeItem[]
}

model Caixa {
  id           Int         @id @default(autoincrement())
  gradeId      Int
  escolaCaixa  String
  escolaNumber String
  projeto      String
  qtyCaixa     Int
  caixaNumber  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  usuario      Usuarios?   @relation(fields: [userId], references: [id])
  userId       Int?
  grade        Grade       @relation(fields: [gradeId], references: [id])
  caixaItem    CaixaItem[]

  @@unique([gradeId, caixaNumber])
}

model CaixaItem {
  id            Int      @id @default(autoincrement())
  caixaId       Int
  itemName      String
  itemGenero    String
  itemTam       String
  itemQty       Int
  itemTamanhoId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  caixa         Caixa    @relation(fields: [caixaId], references: [id])
}

model GradeItem {
  id                 Int         @id @default(autoincrement())
  gradeId            Int
  itemTamanhoId      Int
  quantidade         Int
  quantidadeExpedida Int
  qtyPCaixa          Int         @default(0)
  isCount            Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  grade              Grade       @relation(fields: [gradeId], references: [id])
  itemTamanho        ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
}

model Embalagem {
  id           Int          @id @default(autoincrement())
  entryInput   EntryInput[]
  nome         String       @unique @db.VarChar(200)
  email        String       @unique @db.VarChar(200)
  nomefantasia String?      @db.VarChar(200)
  telefone     String?      @db.VarChar(15)
  whats        String       @db.VarChar(15)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model EntryInput {
  id            Int         @id @default(autoincrement())
  embalagem     Embalagem   @relation(fields: [embalagemId], references: [id])
  embalagemId   Int
  itemTamanho   ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
  itemTamanhoId Int
  estoque       Estoque     @relation(fields: [estoqueId], references: [id])
  estoqueId     Int
  usuario       Usuarios?   @relation(fields: [userId], references: [id])
  userId        Int?
  quantidade    Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OutInput {
  id            Int         @id @default(autoincrement())
  itemTamanho   ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
  itemTamanhoId Int
  estoque       Estoque     @relation(fields: [estoqueId], references: [id])
  estoqueId     Int
  usuario       Usuarios?   @relation(fields: [userId], references: [id])
  userId        Int?
  quantidade    Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Ops {
  id            Int         @id @default(autoincrement())
  op            String      @unique @db.VarChar(10)
  quantidade    Int
  seloImpresso  Boolean     @default(false)
  faccao        Faccoes     @relation(fields: [faccaoId], references: [id])
  faccaoId      Int
  itemTamanho   ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
  itemTamanhoId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Faccoes {
  id        Int                 @id @default(autoincrement())
  nome      String              @unique @db.VarChar(200)
  ops       Ops[]
  telefone  TelephonesFaccoes[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model TelephonesFaccoes {
  id        Int      @id @default(autoincrement())
  telefone  String   @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  faccaoId  Int
  faaccao   Faccoes  @relation(fields: [faccaoId], references: [id])
}

enum Genero {
  MASCULINO
  FEMININO
  UNISSEX
}
