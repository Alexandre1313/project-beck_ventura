// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Usuarios {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Projeto {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  descricao String
  escolas   Escola[] // Relacionamento com as Escolas
  itens     Item[] // Relacionamento com os Itens do projeto
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Escola {
  id           Int      @id @default(autoincrement())
  numeroEscola String
  nome         String
  projeto      Projeto  @relation(fields: [projetoId], references: [id])
  projetoId    Int // Relacionamento com o Projeto
  grades       Grade[] // Relacionamento com as Grades de Distribuição
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([projetoId, nome]) // Garante que o nome da escola é único por projeto   
}

model Item {
  id        Int           @id @default(autoincrement())
  nome      String
  genero    Genero // Masculino, Feminino ou Unissex
  projeto   Projeto       @relation(fields: [projetoId], references: [id])
  projetoId Int
  tamanhos  ItemTamanho[] // Relacionamento com tamanhos específicos
  url       String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([nome, projetoId, genero])
}

model Tamanho {
  id        Int           @id @default(autoincrement())
  nome      String // Tamanho P, M, G, GG, etc.
  itens     ItemTamanho[] // Itens que possuem esse tamanho
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([nome])
}

model ItemTamanho {
  id        Int         @id @default(autoincrement())
  item      Item        @relation(fields: [itemId], references: [id])
  itemId    Int
  tamanho   Tamanho     @relation(fields: [tamanhoId], references: [id])
  tamanhoId Int
  barcode   Barcode? // Relacionamento com o código de barras único
  estoque   Estoque? // Estoque desse item/tamanho (agora opcional)
  url       String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  GradeItem GradeItem[]

  @@unique([itemId, tamanhoId])
}

model Barcode {
  id            Int         @id @default(autoincrement())
  codigo        String      @unique
  itemTamanho   ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
  itemTamanhoId Int         @unique // Corrigido para ser único
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Estoque {
  id            Int         @id @default(autoincrement())
  itemTamanho   ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
  itemTamanhoId Int         @unique // Corrigido para ser único
  quantidade    Int // Quantidade em estoque
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Grade {
  id          Int         @id @default(autoincrement())
  escola      Escola      @relation(fields: [escolaId], references: [id])
  escolaId    Int
  itensGrade  GradeItem[] // Relacionamento com os itens dessa grade
  gradeCaixas Caixa[]
  finalizada  Boolean     @default(false) // Indica se a grade foi finalizada
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Caixa {
  id           Int         @id @default(autoincrement())
  grade        Grade       @relation(fields: [gradeId], references: [id])
  gradeId      Int
  escolaCaixa  String
  escolaNumber String
  projeto      String
  qtyCaixa     Int
  caixaNumber  String
  caixaItem    CaixaItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([gradeId, caixaNumber]) // Garante que cada caixa tenha um número único dentro da mesma grade
}

model CaixaItem {
  id            Int      @id @default(autoincrement())
  caixa         Caixa    @relation(fields: [caixaId], references: [id])
  caixaId       Int
  itemName      String
  itemGenero    String
  itemTam       String
  itemQty       Int
  itemTamanhoId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GradeItem {
  id                 Int         @id @default(autoincrement())
  grade              Grade       @relation(fields: [gradeId], references: [id])
  gradeId            Int
  itemTamanho        ItemTamanho @relation(fields: [itemTamanhoId], references: [id])
  itemTamanhoId      Int
  quantidade         Int // Quantidade total a ser expedida
  quantidadeExpedida Int // Quantidade já expedida
  qtyPCaixa          Int         @default(0)
  isCount            Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

enum Genero {
  MASCULINO
  FEMININO
  UNISSEX
}
