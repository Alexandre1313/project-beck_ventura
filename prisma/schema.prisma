// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Usuarios {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  password String
  criadoEm DateTime @default(now())
  // Adicione outros campos conforme necessário
}

model Projeto {
  id      Int      @id @default(autoincrement()) // Identificador único do projeto
  nome    String   @unique // Nome do projeto (ex: Joinville)
  escolas Escola[] // Um projeto pode ter várias escolas
  itens   Item[] // Um projeto pode ter vários itens
}

model Escola {
  id        Int     @id @default(autoincrement()) // Identificador único
  nome      String // Nome da escola
  projetoId Int // Relacionamento com o projeto
  projeto   Projeto @relation(fields: [projetoId], references: [id])
  grades    Grade[] // As grades associadas à escola
  @@unique([projetoId, nome]) // Restringe nomes duplicados por projeto
}

model Item {
  id        Int       @id @default(autoincrement()) // Identificador único
  nome      String // Nome do item (ex: Short-Saia)
  genero    Genero // Enum: MASCULINO, FEMININO, UNISSEX
  projetoId Int // Relacionamento com o projeto
  projeto   Projeto   @relation(fields: [projetoId], references: [id])
  tamanhos  Tamanho[] // Vários tamanhos associados ao item
  grades    Grade[] // Grades associadas ao item
  estoque   Estoque[] // Estoque associado ao item
}

model Tamanho {
  id       Int       @id @default(autoincrement()) // Identificador único do tamanho
  valor    String // Tamanho (ex: P, M, G)
  itemId   Int // Relacionamento com o item
  item     Item      @relation(fields: [itemId], references: [id])
  grades   Grade[]   @relation("GradeTamanho") // Relação oposta com Grade
  estoques Estoque[] @relation("EstoqueTamanho") // Relação oposta com Estoque

  @@unique([itemId, valor]) // Garante que o tamanho é único por item
}

model Grade {
  id             Int      @id @default(autoincrement()) // Identificador único
  escolaId       Int // Relacionamento com a escola
  escola         Escola   @relation(fields: [escolaId], references: [id])
  itemId         Int // Relacionamento com o item
  item           Item     @relation(fields: [itemId], references: [id])
  tamanhoId      Int // Relacionamento com o tamanho
  tamanho        Tamanho  @relation(fields: [tamanhoId], references: [id], name: "GradeTamanho")
  totalExpedir   Int // Total a ser expedido
  expedido       Int      @default(0) // Total já expedido
  expedicaoAtiva Boolean  @default(true) // Se a expedição está ativa
  createdAt      DateTime @default(now()) // Data de criação da grade
  updatedAt      DateTime @updatedAt // Data da última atualização
}

model Estoque {
  id         Int      @id @default(autoincrement()) // Identificador único
  itemId     Int // Relacionamento com o item
  item       Item     @relation(fields: [itemId], references: [id])
  tamanhoId  Int // Relacionamento com o tamanho
  tamanho    Tamanho  @relation(fields: [tamanhoId], references: [id], name: "EstoqueTamanho")
  quantidade Int // Quantidade disponível no estoque
  updatedAt  DateTime @updatedAt // Data da última atualização
}

enum Genero {
  MASCULINO
  FEMININO
  UNISSEX
}
